{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","time","setTime","timerOn","setTimerOn","React","useEffect","interval","setInterval","prevTime","clearInterval","className","Math","floor","slice","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4MA8CeA,EA3CH,WACV,MAAwBC,mBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA8BF,oBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KAgBA,OAdAC,IAAMC,WAAU,WACd,IAAIC,EAAW,KAUf,OARIJ,EACFI,EAAWC,aAAY,WACrBN,GAAQ,SAACO,GAAD,OAAcA,EAAW,QAChC,IACON,GACVO,cAAcH,GAGT,kBAAMG,cAAcH,MAC1B,CAACJ,IAGF,sBAAKQ,UAAU,SAAf,UACE,2CACA,sBAAKA,UAAU,UAAf,UACE,uBAAMA,UAAU,gBAAhB,WAAkC,IAAMC,KAAKC,MAAOZ,EAAO,IAAS,KAAKa,OAAO,GAAhF,OACA,uBAAMH,UAAU,gBAAhB,WAAkC,IAAMC,KAAKC,MAAOZ,EAAO,IAAQ,KAAKa,OAAO,GAA/E,OACA,sBAAMH,UAAU,gBAAhB,UAAkC,IAAQV,EAAO,GAAM,KAAMa,OAAO,QAGtE,sBAAKH,UAAU,UAAf,WACIR,GAAoB,IAATF,GACX,wBAAQc,QAAS,kBAAMX,GAAW,IAAlC,mBAEDD,GAAW,wBAAQY,QAAS,kBAAMX,GAAW,IAAlC,mBACVD,GAAWF,EAAO,GAClB,wBAAQc,QAAS,kBAAMb,EAAQ,IAA/B,oBAEAC,GAAWF,EAAO,GAClB,wBAAQc,QAAS,kBAAMX,GAAW,IAAlC,2BC3BKY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.e7ea23e8.chunk.js","sourcesContent":["import React,{useState} from 'react';\nimport './App.css';\n\nconst App = () => {\n  const [time, setTime] = useState(0);\n  const [timerOn, setTimerOn] = useState(false);\n\n  React.useEffect(() => {\n    let interval = null;\n\n    if (timerOn) {\n      interval = setInterval(() => {\n        setTime((prevTime) => prevTime + 10);\n      }, 10);\n    } else if (!timerOn) {\n      clearInterval(interval);\n    }\n\n    return () => clearInterval(interval);\n  }, [timerOn]);\n\n  return (\n    <div className=\"Timers\">\n      <h2>Stopwatch</h2>\n      <div className=\"display\">\n        <span className=\"display__item\">{(\"0\" + Math.floor((time / 60000) % 60)).slice(-2)}:</span>\n        <span className=\"display__item\">{(\"0\" + Math.floor((time / 1000) % 60)).slice(-2)}:</span>\n        <span className=\"display__item\">{(\"0\" + ((time / 10) % 100)).slice(-2)}</span>\n      </div>\n\n      <div className=\"buttons\">\n        {!timerOn && time === 0 && (\n          <button onClick={() => setTimerOn(true)}>Start</button>\n        )}\n        {timerOn && <button onClick={() => setTimerOn(false)}>Stop</button>}\n        {!timerOn && time > 0 && (\n          <button onClick={() => setTime(0)}>Reset</button>\n        )}\n        {!timerOn && time > 0 && (\n          <button onClick={() => setTimerOn(true)}>Resume</button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}